#!/bin/sh

# IUseArchBTW

# Enable debugging and testing
# Example: sh IUseArchBTW debug
debug=
if [ "${1}" = d -o "${1}" = debug ]; then
	debug="true"
fi

# Path to check if the system is booted as UEFI or Legacy BIOS
efi_path="/sys/firmware/efi/efivars"
# Directory to mount EFI boot data
efi_boot_dir="/mnt/boot/efi"

# Redirect output to log files
exec 1> >(tee "out.log")
exec 2> >(tee "err.log")

if [ "${debug}" = true ]; then
	# Preset variables for testing
	host_input="arch"
	name_input="test"
	password_input="test"
	disk_input="/dev/sda"
else
	read -p "Enter Hostname (Name of the Computer): " host_input
	read -p "Enter Username: " name_input
	read -p "Enter Password: " -s password_input
	lsblk
	read -p "Enter Disk (Example: /dev/sda): " disk_input
fi

timedatectl set-ntp true

boot_start_num="1"
boot_start="${boot_start_num}MiB"
boot_end_num="$(( ${boot_start_num} + 128 ))"
boot_end="${boot_end_num}MiB"
swap_end_num="$(( ${boot_end_num} + 8 ))"
swap_end="${swap_end_num}MiB"

root_part=
boot_part=
swap_part=

if [ -d "${efi_path}" ]; then
	parted --script "${disk_input}" -- mklabel gpt \
	mkpart ESP fat32 "${boot_start}" "${boot_end}" \
	mkpart primary linux-swap "${boot_end}" "${swap_end}" \
	mkpart primary ext4 "${swap_end}" 100% \
	set 1 esp on
	boot_part="${disk_input}1"
	swap_part="${disk_input}2"
	root_part="${disk_input}3"
else
	parted --script "${disk_input}" -- mklabel msdos \
	mkpart primary linux-swap "${boot_end}" "${swap_end}" \
	mkpart primary ext4 "${swap_end}" 100% \
	set 2 boot on
	swap_part="${disk_input}1"
	root_part="${disk_input}2"
fi
parted --script "${disk_input}" -- set "${boot_num}" boot on

mkfs.ext4 "${root_part}"
mount "${root_part}" /mnt

mkswap -L swap "${swap_part}"
swapon "${swap_part}"

if [ -d "${efi_path}" ]; then
	mkfs.fat -F 32 -n boot "${boot_part}"
	mkdir -p "${efi_boot_dir}"
	mount "${boot_part}" "${efi_boot_dir}"
fi

pacstrap /mnt linux linux-firmware base sudo vi networkmanager --noconfirm
if [ -d "${efi_path}" ]; then
	pacstrap /mnt efibootmgr --noconfirm
else
	pacstrap /mnt grub --noconfirm
fi

genfstab -U /mnt | tee -a /mnt/etc/fstab

arch-chroot /mnt ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime
arch-chroot /mnt hwclock --systohc

printf "en_US.UTF-8 UTF-8\n" | tee -a /mnt/etc/locale.gen
arch-chroot /mnt locale-gen
printf "LANG=en_US.UTF-8\n" | tee -a /mnt/etc/locale.conf

printf "${host_input}\n" | tee /mnt/etc/hostname

arch-chroot /mnt useradd --create-home --user-group "${name_input}"
printf "${name_input}:${password_input}" | chpasswd --root /mnt

printf "${name_input} ALL=(ALL) ALL\n" | tee -a /mnt/etc/sudoers

arch-chroot /mnt systemctl enable --now NetworkManager

if [ -d "${efi_path}" ]; then
	arch-chroot /mnt bootctl install
else
	arch-chroot /mnt grub-install "${disk_input}"
	arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
fi

printf "All Done Hopefully It Works\n"

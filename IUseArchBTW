#!/bin/sh

# IUseArchBTW

# Enable debugging and testing
# Example: sh IUseArchBTW debug
debug=
if [ "${1}" = d -o "${1}" = debug ]; then
	debug="true"
fi

if [ "${debug}" = true ]; then
	# Preset variables for testing
	host_input="arch"
	name_input="test"
	password_input="test"
	disk_input="/dev/sda"
fi

# Path to check if the system is booted as UEFI or Legacy BIOS
efi_path="/sys/firmware/efi/efivars"
# Directory to mount EFI boot data
efi_boot_dir="/mnt/boot/efi"

if [ ! "${debug}" = true ]; then
	# Exit when any command fails
	set -e
	# Keep track of the last executed command
	trap 'last_command=$current_command; current_command=$BASH_COMMAND' DEBUG
	# echo an error message before exiting
	trap 'printf "\"%s\" command filed with exit code $?.\n" "${last_command"' EXIT

	read -p "Enter Hostname (Name of the Computer): " host_input
	read -p "Enter Username: " name_input
	read -p "Enter Password: " -s password_input
	lsblk
	read -p "Enter Disk (Example: /dev/sda): " disk_input
fi

timedatectl set-ntp true

printf "Partitioning Drive\n"
if [ -d ${efi_path} ]; then
	parted -s -- "${disk_input}" \
	mklabel gpt \
	mkpart primary 512MiB -8GiB \
	mkpart primary linux-swap -8GiB 100% \
	mkpart ESP fat32 1MiB 512MiB \
	set 3 esp on
else
	parted -s -- "${disk_input}" \
	mklabel msdos \
	mkpart primary 1MiB -8GiB \
	mkpart primary linux-swap -8GiB 100% \
	set 1 boot on
fi

printf "Making Filesysten\n"
mkfs.ext4 "${disk_input}1"
mkswap -L swap "${disk_input}2"
swapon "${disk_input}2"
if [ -d ${efi_path} ]; then
	mkfs.fat -F 32 -n boot "${disk_input}3"
fi
mount "${disk_input}1" /mnt
if [ -d ${efi_path} ]; then
	mkdir -p ${efi_boot_dir}
	mount "${disk_input}3" ${efi_boot_dir}
fi

printf "Installing Kernel and Base Software\n"
pacstrap /mnt linux linux-firmware grub base sudo neovim networkmanager --noconfirm
if [ -d ${efi_path} ]; then
	pacstrap /mnt efibootmgr --noconfirm
fi

printf "Generating fstab\n"
genfstab -U /mnt | tee -a /mnt/etc/fstab

printf "Chrooting\n"
# Commands executed inside /mnt
# This probably is not the most elegant way but I haven't found anything nicer
cat << EOF | arch-chroot /mnt
printf "Symlink Time\n"
ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime

printf "Hardware Clock\n"
hwclock --systohc

printf "Generating Locale\n"
printf "en_US.UTF-8 UTF-8\n" | tee -a /etc/locale.gen
locale-gen
printf "LANG=en_US.UTF-8\n" | tee -a /etc/locale.conf

printf "Setting Hostname\n"
printf "${host_input}" | tee -a /etc/hostname

printf "NetworkManager\n"
systemctl enable --now NetworkManager &&
	printf "NetworkManager Working\n" ||
	printf "NetworkManager not working\n"

printf "ctrl_interface=/run/wpa_supplicant\n" | tee -a /etc/wpa_supplicant/wpa_supplicant.conf
printf "update_config=1\n" | tee -a /etc/wpa_supplicant/wpa_supplicant.conf

printf "Creating User\n"
useradd --create-home --user-group "${name_input}"

printf "Changing User Password\n"
printf "${name_input}:${password_input}" | chpasswd

printf "Enabling Sudo for ${name_input}\n"
printf "${name_input} ALL=(ALL) ALL\n" | tee -a /etc/sudoers
EOF

# If statements are not read in EOF so we have to move outside to install
# correct grub configuration
# EOF needs to not be indented on end/closing line otherwise it causes error
printf "Installing Grub\n"
if [ -d ${efi_path} ]; then
	cat << EOF | arch-chroot /mnt
	grub-install --efi-directory=${efi_boot_dir}
EOF
else
	cat << EOF | arch-chroot /mnt
	grub-install "${disk_input}"
	grub-mkconfig -o /boot/grub/grub.cfg
EOF
fi

printf "All Done Hopefully It Works\n"

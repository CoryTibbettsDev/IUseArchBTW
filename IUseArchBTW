#!/bin/sh

# IUseArchBTW

# Enable debugging and testing
# Example: sh IUseArchBTW debug
debug=0
if [ "${1}" = "d" -o "${1}" = "debug" ]; then
	debug=1
fi

mnt_dir="/mnt"
# Path to check if the system is booted as UEFI or Legacy BIOS
efi_path="/sys/firmware/efi/efivars"
# Directory to mount EFI boot data
efi_boot_dir="${mnt_dir}/boot/efi"
efi=0
[ -d "${efi_path}" ] && efi=1

# Redirect output to log files
exec 1> >(tee "out.log")
exec 2> >(tee "err.log")

if [ "${debug}" -eq 1 ]; then
	# Preset variables for testing
	host_input="arch"
	name_input="test"
	password_input="test"
	disk_input="/dev/sda"
else
	read -p "Enter Hostname (Name of the Computer): " host_input
	read -p "Enter Username: " name_input
	read -p "Enter Password: " -s password_input
	lsblk
	read -p "Enter Disk (Example: /dev/sda): " disk_input
fi

timedatectl set-ntp true

boot_start_num=1
boot_start="${boot_start_num}MiB"
boot_end_num=$(( ${boot_start_num} + 128 ))
boot_end="${boot_end_num}MiB"
swap_end_num=$(( ${boot_end_num} + 8 ))
swap_end="${swap_end_num}MiB"

root_part=
boot_part=
swap_part=

if [ "${efi}" -eq 1 ]; then
	parted --script "${disk_input}" -- mklabel gpt \
	mkpart ESP fat32 "${boot_start}" "${boot_end}" \
	mkpart primary linux-swap "${boot_end}" "${swap_end}" \
	mkpart primary ext4 "${swap_end}" 100% \
	set 1 esp on
	boot_part="${disk_input}1"
	swap_part="${disk_input}2"
	root_part="${disk_input}3"
else
	parted --script "${disk_input}" -- mklabel msdos \
	mkpart primary linux-swap "${boot_end}" "${swap_end}" \
	mkpart primary ext4 "${swap_end}" 100% \
	set 2 boot on
	swap_part="${disk_input}1"
	root_part="${disk_input}2"
fi

mkfs.ext4 "${root_part}"
mount "${root_part}" "${mnt_dir}"

mkswap -L swap "${swap_part}"
swapon "${swap_part}"

if [ "${efi}" -eq 1 ]; then
	mkfs.fat -F 32 -n boot "${boot_part}"
	mkdir -p "${efi_boot_dir}"
	mount "${boot_part}" "${efi_boot_dir}"
fi

pacstrap "${mnt_dir}" linux linux-firmware base sudo vi networkmanager --noconfirm
if [ "${efi}" -eq 1 ]; then
	pacstrap "${mnt_dir}" efibootmgr --noconfirm
else
	pacstrap "${mnt_dir}" grub --noconfirm
fi

genfstab -U "${mnt_dir}" | tee "${mnt_dir}/etc/fstab"

arch-chroot "${mnt_dir}" ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime
arch-chroot "${mnt_dir}" hwclock --systohc

printf "en_US.UTF-8 UTF-8\n" | tee -a "${mnt_dir}/etc/locale.gen"
arch-chroot "${mnt_dir}" locale-gen
printf "LANG=en_US.UTF-8\n" | tee "${mnt_dir}/etc/locale.conf"

printf "%s\n" "${host_input}" | tee "${mnt_dir}/etc/hostname"

arch-chroot "${mnt_dir}" useradd --create-home --user-group "${name_input}"
printf "%s:%s" "${name_input}" "${password_input}" | chpasswd --root "${mnt_dir}"

printf "%s ALL=(ALL) ALL\n" "${name_input}" | tee -a "${mnt_dir}/etc/sudoers"

arch-chroot "${mnt_dir}" systemctl enable --now NetworkManager

# iptables Firewall
cat <<EOF > "${mnt_dir}/etc/iptables/iptables.rules"
# iptables base configuration
# Allow outgoing connections and deny all incoming connections
*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -p icmp -j ACCEPT
-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -p tcp -j REJECT --reject-with tcp-reset
-A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable
-A INPUT -j REJECT --reject-with icmp-proto-unreachable
COMMIT
EOF

cat <<EOF > "${mnt_dir}/etc/iptables/ip6tables.rules"
# ip6tables base configuration
# Deny everything
*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT DROP [0:0]
COMMIT

*raw
:PREROUTING DROP [0:0]
:OUTPUT DROP [0:0]
COMMIT

*nat
:PREROUTING DROP [0:0]
:INPUT DROP [0:0]
:OUTPUT DROP [0:0]
:POSTROUTING DROP [0:0]
COMMIT

*security
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT DROP [0:0]
COMMIT

*mangle
:PREROUTING DROP [0:0]
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT DROP [0:0]
:POSTROUTING DROP [0:0]
COMMIT
EOF
systemctl enable --now iptables

if [ "${efi}" -eq 1 ]; then
	arch-chroot "${mnt_dir}" bootctl install
else
	arch-chroot "${mnt_dir}" grub-install "${disk_input}"
	arch-chroot "${mnt_dir}" grub-mkconfig -o /boot/grub/grub.cfg
fi

printf "All Done Hopefully It Works\n"

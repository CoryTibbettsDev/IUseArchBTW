#!/bin/sh

# Preset variables for testing
# HOSTINPUT=arch
# NAMEINPUT=user
# PASSWORDINPUT=test
# DISKINPUT=/dev/sda

# Path to check if the system is booted as UEFI or Legacy BIOS
EFIPATH=/sys/firmware/efi/efivars
# Directory to mount EFI boot data
EFIBOOTDIR=/mnt/boot/efi

# exit when any command fails
set -e
# keep track of the last executed command
trap 'LAST_COMMAND=$CURRENT_COMMAND; CURRENT_COMMAND=$BASH_COMMAND' DEBUG
# echo an error message before exiting
trap 'echo "\"${LAST_COMMAND}\" command filed with exit code $?."' EXIT

read -p "Enter Hostname (Name of the Computer): " HOSTINPUT
read -p "Enter Username: " NAMEINPUT
read -p "Enter Password: " -s PASSWORDINPUT

lsblk
read -p "Enter Disk (Example: /dev/sda): " DISKINPUT

timedatectl set-ntp true

echo "Partitioning Drive"
# parted -a optimal
# sudo parted -s -a optimal -- /dev/sdX mkpart primary 1MiB -2048s
if [ -d $EFIPATH ]; then
	parted -s -- "${DISKINPUT}" \
	mklabel gpt \
	mkpart primary 512MiB -8GiB \
	mkpart primary linux-swap -8GiB 100% \
	mkpart ESP fat32 1MiB 512MiB \
	set 3 esp on
else
	parted -s -- "${DISKINPUT}" \
	mklabel msdos \
	mkpart primary 1MiB -8GiB \
	mkpart primary linux-swap -8GiB 100% \
	set 1 boot on
fi

echo "Making Filesysten"
mkfs.ext4 "${DISKINPUT}1"
mkswap -L swap "${DISKINPUT}2"
swapon "${DISKINPUT}2"
if [ -d $EFIPATH ]; then
	mkfs.fat -F 32 -n boot "${DISKINPUT}3"
fi
mount "${DISKINPUT}1" /mnt
if [ -d $EFIPATH ]; then
	mkdir -p ${EFIBOOTDIR}
	mount "${DISKINPUT}3" ${EFIBOOTDIR}
fi

echo "Installing Kernel and Base Software"
pacstrap /mnt linux linux-firmware grub base sudo neovim networkmanager --noconfirm
if [ -d $EFIPATH ]; then
	pacstrap /mnt efibootmgr --noconfirm
fi

echo "Generating fstab"
genfstab -U /mnt | tee -a /mnt/etc/fstab

echo "Chrooting"
# Commands executed inside /mnt
# This probably is not the most elegant way but I haven't found anything nicer
cat << EOF | arch-chroot /mnt
echo "Symlink Time"
ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime

echo "Hardware Clock"
hwclock --systohc

echo "Generating Locale"
echo "en_US.UTF-8 UTF-8" | tee -a /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" | tee -a /etc/locale.conf

echo "Setting Hostname"
echo "${HOSTINPUT}" | tee -a /etc/hostname

echo "NetworkManager"
systemctl enable --now NetworkManager && echo "NetworkManager Working" || echo "NetworkManager not working"

echo "ctrl_interface=/run/wpa_supplicant" | tee -a /etc/wpa_supplicant/wpa_supplicant.conf
echo "update_config=1" | tee -a /etc/wpa_supplicant/wpa_supplicant.conf

echo "Creating User"
useradd --create-home --user-group "${NAMEINPUT}"

echo "Changing User Password"
echo "${NAMEINPUT}:${PASSWORDINPUT}" | chpasswd

echo "Enabling Sudo for ${NAMEINPUT}"
echo "${NAMEINPUT} ALL=(ALL) ALL" | tee -a /etc/sudoers
EOF

# If statements are not read in EOF so we have to move outside to install
# correct grub configuration
# EOF needs to not be indented on end/closing line otherwise it causes error
echo "Installing Grub"
if [ -d $EFIPATH ]; then
	cat << EOF | arch-chroot /mnt
	grub-install --efi-directory=${EFIBOOTDIR}
EOF
else
	cat << EOF | arch-chroot /mnt
	grub-install "${DISKINPUT}"
	grub-mkconfig -o /boot/grub/grub.cfg
EOF
fi

echo "All Done Hopefully It Works"

#!/bin/sh

# IUseArchBTW

# Enable debugging and testing
# Example: sh IUseArchBTW debug
debug=0
if [ "${1}" = "d" ] || [ "${1}" = "debug" ]; then
	debug=1
	set -x
fi

mnt_dir="/mnt"
boot_dir="${mnt_dir}/boot"
# Path to check if the system is booted as UEFI or BIOS
efi_path="/sys/firmware/efi/efivars"
# Directory to mount EFI boot data
efi=0
[ -d "${efi_path}" ] && efi=1

# Redirect output to log files
exec 1> >(tee "out.log")
exec 2> >(tee "err.log")

# Test for our init system and distrobution
if type "systemctl" > /dev/null 2>&1; then
	# Assume it is arch if we have systemd
	os="arch"
	init="systemd"
else
	# Assume it is artix if we have another init system
	os="artix"
	if type "rc-update" > /dev/null 2>&1; then
		init="openrc"
	elif type "sv" > /dev/null 2>&1; then
		init="runit"
	elif type "s6-rc" > /dev/null 2>&1; then
		init="s6"
	elif type "66-tree" > /dev/null 2>&1; then
		init="suite66"
	else
		printf "Unsupported or unknown init system\n" 1>&2
		exit 1
	fi
fi

# Set os specific variables
# Using eval "${chroot_cmd}" is not a perfect solution but I explicitly control
# the variables so there shouldn't be any errors and the only other option I
# know is to completely rewrite every command with arch-chroot and artix-chroot_cmd
# which would be extremely redudant and nightmarish to change
if [ "${os}" = arch ]; then
	su_cmd="sudo"
	chroot_cmd="arch-chroot"
elif [ "${os}" = artix ]; then
	su_cmd="doas"
	chroot_cmd="artix-chroot"
	# Artix does not come with parted on it's iso so we have to install it
	pacman -Sy parted
else
	printf "Unknown os: %s\n" "${os}" 1>&2
	exit 1
fi

get_password() {
	printf "Enter Password: "
	stty -echo
	read -r password_input
	stty echo
	printf "\nEnter Password Again: "
	stty -echo
	read -r password_input_again
	stty echo
	printf "\n"

	if [ "${password_input}" = "${password_input_again}" ]; then
		return 0
	else
		printf "\nPasswords do not match please try again.\n"
		get_password
	fi
}

# Print os and init information so user can cancel if they want
printf "Detected operarting system is: %s\n" "${os}"
printf "Detected init system is: %s\n" "${init}"

language="en_US.UTF-8"

if [ "${debug}" -eq 1 ]; then
	# Preset variables for testing
	host_input="IUseArchBTW"
	name_input="test"
	password_input="test"
	disk_input="/dev/sda"
else
	printf "Enter Hostname (Name of the Computer): "
	read host_input
	printf "\nEnter Username: "
	read name_input
	get_password
	lsblk
	printf "\nEnter Disk (Example: /dev/sda): "
	read disk_input
fi

if [ "${os}" = arch ]; then
	timedatectl set-ntp true
fi

# Partitioning (It's annoying)
boot_start_num=1
boot_start="${boot_start_num}MiB"
if [ "${efi}" -eq 1 ]; then
	boot_end_num=$(( ${boot_start_num} + 550 ))
else
	boot_end_num=$(( ${boot_start_num} + 5 ))
fi
boot_end="${boot_end_num}MiB"
# 8192MiB = 8GiB (I Think)
swap_end_num=$(( ${boot_end_num} + 8192 ))
swap_end="${swap_end_num}MiB"

if [ "${efi}" -eq 1 ]; then
	parted --script "${disk_input}" -- mklabel gpt \
	mkpart ESP fat32 "${boot_start}" "${boot_end}" \
	mkpart primary linux-swap "${boot_end}" "${swap_end}" \
	mkpart primary ext4 "${swap_end}" 100% \
	set 1 boot on || printf "PARTITIONING FAILED\n" 1>&2
else
	parted --script "${disk_input}" -- mklabel msdos \
	mkpart primary ext4 "${boot_start}" "${boot_end}" \
	mkpart primary linux-swap "${boot_end}" "${swap_end}" \
	mkpart primary ext4 "${swap_end}" 100% \
	set 1 boot on || printf "PARTITIONING FAILED\n" 1>&2
fi

boot_part="${disk_input}1"
swap_part="${disk_input}2"
root_part="${disk_input}3"

# Make filesystems
# Set labels so we can use /dev/disk/by-label later
mkfs.ext4 -L ROOT "${root_part}"
mkswap -L SWAP "${swap_part}"

if [ "${efi}" -eq 1 ]; then
	mkfs.fat -F 32 -n boot "${boot_part}"
	fatlabel "${boot_part}" BOOT
else
	mkfs.ext4 -L BOOT "${boot_part}"
fi

# Mount partitions
mkdir -p "${boot_dir}"
mount /dev/disk/by-label/BOOT "${boot_dir}"
swapon /dev/disk/by-label/SWAP "${mnt_dir}"
mount /dev/disk/by-label/ROOT "${mnt_dir}"

# Install base system
if [ "${os}" = arch ]; then
	pacstrap "${mnt_dir}" linux linux-firmware base vi sudo networkmanager grub --noconfirm
	if [ "${efi}" -eq 1 ]; then
		pacstrap "${mnt_dir}" efibootmgr --noconfirm
	fi
elif [ "${os}" = artix ]; then
	basestrap "${mnt_dir}" linux linux-firmware base base-devel vi doas grub --noconfirm
	if [ "${init}" = openrc ]; then
		basestrap "${mnt_dir}" openrc elogind-openrc networkmanager-openrc --noconfirm
	elif [ "${init}" = runit ]; then
		basestrap "${mnt_dir}" runit elogind-runit networkmanager-runit --noconfirm
	elif [ "${init}" = s6 ]; then
		basestrap "${mnt_dir}" s6-base elogind-s6 networkmanager-s6 --noconfirm
	elif [ "${init}" = suite66 ]; then
		basestrap "${mnt_dir}" suite66-base elogind-suite66 networkmanager-suite66 --noconfirm
	fi
	if [ "${efi}" -eq 1 ]; then
		basestrap "${mnt_dir}" efibootmgr --noconfirm
	fi
fi

# Generate fstab
if [ "${os}" = arch ]; then
	genfstab -U "${mnt_dir}" | tee "${mnt_dir}/etc/fstab"
elif [ "${os}" = artix ]; then
	fstabgen -U "${mnt_dir}" | tee "${mnt_dir}/etc/fstab"
fi

# Setup hostname
printf "%s\n" "${host_input}" | tee "${mnt_dir}/etc/hostname"
cat <<EOF | tee "${mnt_dir}/etc/hosts"
127.0.0.1 localhost
::1       localhost
127.0.1.1 ${host_input}.localdomain ${host_input}
EOF

# Set time zone
eval "${chroot_cmd}" "${mnt_dir}" ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime
# Run hwclock to generate /etc/adjtime
eval "${chroot_cmd}" "${mnt_dir}" hwclock --systohc

# Locale and Keyboard
printf "%s UTF-8\n" "${language}" | tee -a "${mnt_dir}/etc/locale.gen"
eval "${chroot_cmd}" "${mnt_dir}" locale-gen
cat <<EOF | tee "${mnt_dir}/etc/locale.conf"
export LANG="${language}"
export LC_COLLATE="C"
EOF

if [ "${os}" = artix ]; then
cat <<EOF | tee "${mnt_dir}/etc/conf.d/keymaps"
LANG=${language}
LC_CTYPE="${language}"
LC_NUMERIC="${language}"
LC_TIME="${language}"
LC_COLLATE="${language}"
LC_MONETARY="${language}"
LC_MESSAGES="${language}"
LC_PAPER="${language}"
LC_NAME="${language}"
LC_ADDRESS="${language}"
LC_TELEPHONE="${language}"
LC_MEASUREMENT="${language}"
LC_IDENTIFICATION="${language}"
LC_ALL=
EOF
fi

cat <<EOF | tee "${mnt_dir}/etc/vconsole.conf"
KEYMAP=us
EOF

eval "${chroot_cmd}" "${mnt_dir}" useradd --create-home --user-group "${name_input}"
printf "%s:%s" "${name_input}" "${password_input}" | chpasswd --root "${mnt_dir}"

if [ "${su_cmd}" = sudo ]; then
	printf "%s ALL=(ALL) ALL\n" "${name_input}" | tee -a "${mnt_dir}/etc/sudoers"
elif [ "${su_cmd}" = doas ]; then
	printf "permit %s\n" "${name_input}" | tee "${mnt_dir}/etc/doas.conf"
fi

# iptables Firewall
cat <<EOF | tee "${mnt_dir}/etc/iptables/iptables.rules"
# iptables base configuration
# Allow outgoing connections and deny all incoming connections
*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -p icmp -j ACCEPT
-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -p tcp -j REJECT --reject-with tcp-reset
-A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable
-A INPUT -j REJECT --reject-with icmp-proto-unreachable
COMMIT
EOF

cat <<EOF | tee "${mnt_dir}/etc/iptables/ip6tables.rules"
# ip6tables base configuration
# Deny everything
*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT DROP [0:0]
COMMIT

*raw
:PREROUTING DROP [0:0]
:OUTPUT DROP [0:0]
COMMIT

*nat
:PREROUTING DROP [0:0]
:INPUT DROP [0:0]
:OUTPUT DROP [0:0]
:POSTROUTING DROP [0:0]
COMMIT

*security
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT DROP [0:0]
COMMIT

*mangle
:PREROUTING DROP [0:0]
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT DROP [0:0]
:POSTROUTING DROP [0:0]
else
COMMIT
EOF

# Enable services on boot
if [ "${init}" = systemd ]; then
	arch-chroot "${mnt_dir}" systemctl enable --now iptables
	arch-chroot "${mnt_dir}" systemctl enable --now NetworkManager
elif [ "${init}" = openrc ]; then
	# https://serverfault.com/questions/1059232/what-runlevel-should-ufw-firewall-start-at-in-alpine-linux
	# Networking starts at boot run level so maybe use boot run level instead?
	eval "${chroot_cmd}" rc-update add iptables default
	eval "${chroot_cmd}" rc-update add networkmanager default
elif [ "${init}" = runit ]; then
	eval "${chroot_cmd}" ln -s /etc/runit/sv/iptables /etc/runit/runsvdir/default
	eval "${chroot_cmd}" ln -s /etc/runit/sv/networkmanager /etc/runit/runsvdir/default
elif [ "${init}" = "s6" ]; then
	eval "${chroot_cmd}" s6-rc-bundle-update -c add default iptables
	eval "${chroot_cmd}" s6-rc-bundle-update -c add default networkmanager
elif [ "${init}" = "suite66" ]; then
	eval "${chroot_cmd}" 66-enable -t default iptables
	eval "${chroot_cmd}" 66-enable -t default networkmanager
fi

if [ "${efi}" -eq 1 ]; then
	eval "${chroot_cmd}" "${mnt_dir}" grub-install --target=x86_64-efi \
		--efi-directory="${boot_dir#${mnt_dir}}" --bootloader-id=grub
else
	eval "${chroot_cmd}" "${mnt_dir}" grub-install \
		--boot-directory="${boot_dir#${mnt_dir}}" "${disk_input}"
fi
eval "${chroot_cmd}" "${mnt_dir}" grub-mkconfig -o "${boot_dir#${mnt_dir}}/grub/grub.cfg"

# Disable root user
printf "%s:%s" "root" "RANDOMNOTHINGNESS" | chpasswd --root "${mnt_dir}"
usermod --root "${mnt_dir}" --lock root || printf "ERROR: could not lock root user\n" 1>&2
usermod --root "${mnt_dir}" --expiredate 1 root || printf "ERROR: could not set root user expiredate\n" 1>&2

umount -R "${mnt_dir}" || printf "ERROR: umount error with: %s\n" "${mnt_dir}" 1>&2

printf "All Done Hopefully It Works\n"

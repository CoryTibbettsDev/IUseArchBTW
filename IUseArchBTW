#!/bin/sh

# Check if the system is booted as UEFI or Legacy BIOS
ls /sys/firmware/efi/efivars && EFI=1 || EFI=0
printf "EFI variable is $EFI\n"

# sudo parted -s -a optimal -- /dev/sdX mkpart primary 1MiB -2048s
# exit when any command fails
set -e
# keep track of the last executed command
trap 'last_command=$current_command; current_command=$BASH_COMMAND' DEBUG
# echo an error message before exiting
trap 'echo "\"${last_command}\" command filed with exit code $?."' EXIT

echo "Enter Username"
read NAMEINPUT
echo "Enter Hostname (Name of the Computer)"
read HOSTINPUT

lsblk
echo "Enter disk (Example: /dev/sda)"
read DISK

timedatectl set-ntp true

echo "Partitioning Drive"
if [ $EFI ]; then
	parted -a optimal -s -- "${DISK}" \
	mklabel gpt \
	mkpart primary 512MiB -8GiB \
	mkpart primary linux-swap -8GiB 100% \
	mkpart ESP fat32 1MiB 512MiB \
	set 3 esp on
else
	parted -a optimal -s -- "${DISK}" \
	mklabel msdos \
	mkpart primary 1MiB -8GiB \
	mkpart primary linux-swap -8GiB 100%
fi

echo "Making Filesysten"
mkfs.ext4 -L arch "${DISK}1"
mkswap -L swap "${DISK}2"
swapon "${DISK}2"
if [ $EFI ]; then
	mkfs.fat -F 32 -n "UEFISYS" "${DISK}3"
fi
mount "${DISK}1" /mnt
if [ $EFI ]; then
	mkdir -p /mnt/boot
	mount "${DISK}3" /mnt/boot
fi

echo "Installing Kernel and Base Software"
pacstrap /mnt linux linux-firmware grub base base-devel sudo neovim networkmanager --noconfirm --needed
if [ $EFI ]; then
	pacstrap /mnt efibootmgr --noconfirm
fi

echo "Generating fstab"
genfstab -U /mnt | tee -a /mnt/etc/fstab

echo "Chrooting"
# Commands executed inside /mnt
# This probably is not the best way to do this but I have not found another way
cat << EOF | arch-chroot /mnt

echo "Symlink Time"
ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime

echo "Hardware Clock"
hwclock --systohc

echo "Generating Locale"
echo "en_US.UTF-8 UTF-8" | tee -a /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" | tee -a /etc/locale.conf

echo "Setting Hostname"
echo "${HOSTINPUT}" | tee -a /etc/hostname

echo "NetworkManager"
systemctl enable --now NetworkManager && echo "NetworkManager Working" || echo "NetworkManager not working"

echo "ctrl_interface=/run/wpa_supplicant" | tee -a /etc/wpa_supplicant/wpa_supplicant.conf
echo "update_config=1" | tee -a /etc/wpa_supplicant/wpa_supplicant.conf

echo "Creating User"
useradd --create-home --user-group "${NAMEINPUT}"

echo "Enabling Sudo for ${NAMEINPUT}"
echo "%${NAMEINPUT} ALL=(ALL) ALL" | tee -a /etc/sudoers

EOF

# If statements are not read in EOF so we have to move outside to install
# correct grub configuration
# EOF need to be not indented on end/closing line otherwise it causes error
echo "Installing Grub"
if [ $EFI ]; then
	cat << EOF | arch-chroot /mnt
	grub-install --efi-directory=/boot
EOF
else
	cat << EOF | arch-chroot /mnt
	grub-install "${DISK}"
EOF
fi
grub-mkconfig -o /boot/grub/grub.cfg

echo "All Done Hopefully It Works"
echo "Remember to arch-chroot /mnt and set passwd for root and ${NAMEINPUT}"

# echo "myuser:password" | sudo chpasswd
